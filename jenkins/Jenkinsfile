// Define the build trigger for polling SCM every 2 minutes
properties([
    pipelineTriggers([
        pollSCM('H/2 * * * *')
    ])
])

node {
    // Stage: checkout
    stage('Checkout') {
        checkout scm
    } 
    // Stage: Build
    stage('Build') {
        docker.image('python:2-alpine').inside {
            sh 'python -m py_compile sources/add2vals.py sources/calc.py'
        }
    }
    
    // Stage: Test
    stage('Test') {
        docker.image('qnib/pytest').inside {
            try {
                sh 'py.test --verbose --junit-xml test-reports/results.xml sources/test_calc.py'
            } finally {
                junit 'test-reports/results.xml'
            }
        }
    }

    //Stage: Manual Approval before deployment
    stage('Manual Approval') {
            input message: 'Lanjutkan ke tahap Deploy?', ok: 'Proceed'
    }

    // Stage: Deploy
    stage('Deploy') {
        docker.image('python:2-alpine').inside('-p 5005:5005') {  // Added port mapping
            try {
                // Deploy step with port configuration
                sh '''
                    echo "Deploying application on port 5005..."
                    export PORT=5005
                    # Add your deployment commands here
                    python sources/calc.py
                '''
                
                echo 'Application deployed and running on http://localhost:5005'
                
                // Keep the pipeline running for 1 minute
                sleep(time: 60, unit: 'SECONDS')

                sh '''
                    echo 'Killing Python application...'

                    # Find Python processes and kill them
                    pkill python || true

                    echo 'Python application stopped'
                '''
            } catch (error) {
                currentBuild.result = 'FAILURE'
                throw error
            } finally {
                // Cleanup or post-deployment tasks
                sh 'echo "Deployment stage completed"'
            }
        }
    }
}